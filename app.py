
import streamlit as st
import fitz  # PyMuPDF
import pandas as pd
import re
import io

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ PDF
def extract_text_from_pdf(pdf_file):
    text = ""
    with fitz.open(stream=pdf_file.read(), filetype="pdf") as doc:
        for page in doc:
            text += page.get_text()
    return text

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ –∑ —Ç–µ–∫—Å—Ç—É
def extract_invoice_data(text):
    data = []

    # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏ –∑–∞ —Ä–∞—Ö—É–Ω–∫–∞–º–∏/–∞–∫—Ç–∞–º–∏
    blocks = re.split(r"(–†–∞—Ö—É–Ω–æ–∫\s*‚Ññ|–ê–∫—Ç\s*‚Ññ)", text, flags=re.IGNORECASE)
    if len(blocks) < 3:
        return []

    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –±–ª–æ–∫
    for i in range(1, len(blocks), 2):
        doc_type = blocks[i].strip()
        content = blocks[i + 1]

        entry = {"–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞": doc_type}

        # –í–∏—Ç—è–≥—É—î–º–æ –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è
        entry["–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞"] = re.search(r"‚Ññ\s*([A-Za-z–ê-–Ø–∞-—è0-9\-/]+)", content)
        entry["–î–∞—Ç–∞"] = re.search(r"–≤—ñ–¥\s*(\d{1,2}[./]\d{1,2}[./]\d{2,4})", content)
        entry["–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫"] = re.search(r"(–¢–û–í|–ö–ü|–ö–ù–ü|–§–û–ü|–ü–ü|–ü—Ä–ê–¢|–ê–¢)[^\n,]+", content)
        entry["–Ñ–î–†–ü–û–£ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"] = re.search(r"–Ñ–î–†–ü–û–£\s*[:‚Ññ]?\s*(\d{8})", content)
        entry["IBAN"] = re.search(r"UA[0-9A-Z]{25,29}", content)
        entry["–ú–§–û"] = re.search(r"–ú–§–û\s*[:‚Ññ]?\s*(\d{6})", content)
        entry["–û–¥–µ—Ä–∂—É–≤–∞—á"] = re.search(r"–û–¥–µ—Ä–∂—É–≤–∞—á[^\n:]*[:\s]*([^\n,]+)", content)
        entry["–Ñ–î–†–ü–û–£ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞"] = re.search(r"–Ñ–î–†–ü–û–£.*?(\d{8})", content)
        entry["–î–æ–≥–æ–≤—ñ—Ä"] = re.search(r"–î–æ–≥–æ–≤—ñ—Ä[^\n:]*[:\s]*([^\n,]+)", content)
        entry["–°—É–º–∞ –±–µ–∑ –ü–î–í"] = re.search(r"–°—É–º–∞ –±–µ–∑ –ü–î–í[^\d]*(\d+[.,]?\d*)", content)
        entry["–ü–î–í"] = re.search(r"–ü–î–í[^\d]*(\d+[.,]?\d*)", content)
        entry["–°—É–º–∞ –∑ –ü–î–í"] = re.search(r"(–í—Å—å–æ–≥–æ|–†–∞–∑–æ–º).*?(\d+[.,]?\d*)", content)

        # –û—á–∏—â–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        for key in entry:
            if isinstance(entry[key], re.Match):
                entry[key] = entry[key].group(1).strip()

        data.append(entry)

    return data

# –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üìÑ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—ñ–≤ —Ç–∞ –∞–∫—Ç—ñ–≤")
st.write("–ó–∞–≤–∞–Ω—Ç–∞–∂ PDF-—Ñ–∞–π–ª –∑ —Ä–∞—Ö—É–Ω–∫–∞–º–∏ –∞–±–æ –∞–∫—Ç–∞–º–∏, —ñ —è –≤–∏—Ç—è–≥–Ω—É –∫–ª—é—á–æ–≤—ñ –¥–∞–Ω—ñ.")

uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂ PDF", type=["pdf"])

if uploaded_file:
    with st.spinner("–û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É..."):
        text = extract_text_from_pdf(uploaded_file)
        records = extract_invoice_data(text)

        if records:
            df = pd.DataFrame(records)
            st.success(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {len(df)}")
            st.dataframe(df)

            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name="–î–æ–∫—É–º–µ–Ω—Ç–∏")
            st.download_button(
                label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel",
                data=output.getvalue(),
                file_name="—Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ_–¥–æ–∫—É–º–µ–Ω—Ç–∏.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –∞–±–æ –∞–∫—Ç—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ.")
