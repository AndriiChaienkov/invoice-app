import streamlit as st
import fitz  # PyMuPDF
import pandas as pd
import re
import io

# –ö–∞—Å—Ç–æ–º–Ω—ñ —Å—Ç–∏–ª—ñ
st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Open+Sans&display=swap');

        html, body, [class*="css"] {
            font-family: 'Open Sans', sans-serif;
        }

        .centered-title {
            text-align: center;
            font-family: 'Open Sans', sans-serif;
            font-size: 2.5em;
            color: #2c3e50;
            margin-bottom: 20px;
        }

        .stButton>button {
            background-color: #4CAF50;
            color: white;
            font-weight: bold;
        }

        .stDownloadButton>button {
            background-color: #3498db;
            color: white;
        }
    </style>
""", unsafe_allow_html=True)

# –¶–µ–Ω—Ç—Ä–æ–≤–∞–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown('<div class="centered-title">üìÑ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—ñ–≤ —Ç–∞ –∞–∫—Ç—ñ–≤</div>', unsafe_allow_html=True)
st.write("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂ PDF-—Ñ–∞–π–ª –∑ —Ä–∞—Ö—É–Ω–∫–∞–º–∏ –∞–±–æ –∞–∫—Ç–∞–º–∏, —ñ —è –≤–∏—Ç—è–≥–Ω—É –∫–ª—é—á–æ–≤—ñ –¥–∞–Ω—ñ.")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂ PDF", type=["pdf"])

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ PDF
def extract_text_from_pdf(pdf_file):
    text = ""
    with fitz.open(stream=pdf_file.read(), filetype="pdf") as doc:
        for page in doc:
            text += page.get_text()
    return text

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ –∑ —Ç–µ–∫—Å—Ç—É
def extract_invoice_data(text):
    data = []
    blocks = re.split(r"(–†–∞—Ö—É–Ω–æ–∫(?:\s+—Ñ–∞–∫—Ç—É—Ä–∞)?\s*‚Ññ|–ê–∫—Ç\s*‚Ññ)", text, flags=re.IGNORECASE)
    if len(blocks) < 3:
        return []

    for i in range(1, len(blocks), 2):
        doc_type = blocks[i].strip()
        content = blocks[i + 1]
        entry = {"–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞": doc_type}

        entry["–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞"] = re.search(r"‚Ññ\s*([A-Za-z–ê-–Ø–∞-—è0-9\-/]+)", content)
        entry["–î–∞—Ç–∞"] = re.search(r"\b(?:–≤—ñ–¥)?\s*(\d{1,2}[./]\d{1,2}[./]\d{2,4})", content)
        entry["–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫"] = re.search(r"(–¢–û–í|–ö–ü|–ö–ù–ü|–§–û–ü|–ü–ü|–ü—Ä–ê–¢|–ê–¢|–ü–†–ò–í–ê–¢–ù–ï –ê–ö–¶–Ü–û–ù–ï–†–ù–ï –¢–û–í–ê–†–ò–°–¢–í–û)[^\n,]+", content, re.IGNORECASE)
        entry["–Ñ–î–†–ü–û–£ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞"] = re.search(r"(?:–Ñ–î–†–ü–û–£|–ö–æ–¥ –∑–∞ –Ñ–î–†–ü–û–£)\s*[:‚Ññ]?\s*(\d{8})", content)
        entry["IBAN"] = re.search(r"UA[0-9A-Z]{25,29}", content)
        entry["–ú–§–û"] = re.search(r"–ú–§–û\s*[:‚Ññ]?\s*(\d{6})", content)
        entry["–û–¥–µ—Ä–∂—É–≤–∞—á"] = re.search(r"(?:–û–¥–µ—Ä–∂—É–≤–∞—á|–ü–æ–∫—É–ø–µ—Ü—å)[^\n:]*[:\s]*([^\n,]+)", content)
        entry["–Ñ–î–†–ü–û–£ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞"] = re.search(r"(?:–Ñ–î–†–ü–û–£|–ö–æ–¥ –∑–∞ –Ñ–î–†–ü–û–£).*?(\d{8})", content)
        entry["–î–æ–≥–æ–≤—ñ—Ä"] = re.search(r"–î–æ–≥–æ–≤—ñ—Ä[^\n:]*[:\s]*([^\n,]+)", content)
        entry["–°—É–º–∞ –±–µ–∑ –ü–î–í"] = re.search(r"(?:–°—É–º–∞ –±–µ–∑ –ü–î–í|–†–∞–∑–æ–º –±–µ–∑ –ü–î–í)[^\d]*(\d+[.,]?\d*)", content)
        entry["–ü–î–í"] = re.search(r"–ü–î–í[^\d]*(\d+[.,]?\d*)", content)
        entry["–°—É–º–∞ –∑ –ü–î–í"] = re.search(r"(?:–í—Å—å–æ–≥–æ|–†–∞–∑–æ–º|–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑ –ü–î–í)[^\d]*(\d+[.,]?\d*)", content)

        for key in entry:
            match = entry[key]
            if isinstance(match, re.Match) and match.lastindex:
                entry[key] = match.group(1).strip()
            else:
                entry[key] = None

        data.append(entry)

    return data

# –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É
if uploaded_file:
    with st.spinner("‚è≥ –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É..."):
        text = extract_text_from_pdf(uploaded_file)
        records = extract_invoice_data(text)

        if records:
            df = pd.DataFrame(records)
            st.success(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {len(df)}")

            col1, col2 = st.columns([2, 1])

            with col1:
                st.dataframe(df.style.highlight_null())

                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    df.to_excel(writer, index=False, sheet_name="–î–æ–∫—É–º–µ–Ω—Ç–∏")
                st.download_button(
                    label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel",
                    data=output.getvalue(),
                    file_name="—Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ_–¥–æ–∫—É–º–µ–Ω—Ç–∏.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            with col2:
                st.markdown("### üßæ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
                st.json(records, expanded=False)

        else:
            st.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –∞–±–æ –∞–∫—Ç—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ.")
